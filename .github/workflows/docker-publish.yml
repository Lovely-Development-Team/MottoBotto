name: Docker

on:
  push:
    # Publish `develop` as Docker `latest` image.
    branches:
      - develop

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: baby-botto

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Load docker image from cache
        id: cache-docker
        uses: actions/cache@v1
        with:
          path: /tmp/docker-save
          key: docker-save-motto-${{ hashFiles('Dockerfile') }}

      - name: Load cached image into Docker
        run: docker load -i /tmp/docker-save/snapshot.tar || true
        if: steps.cache-docker.outputs.cache-hit == 'true'

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . -t $IMAGE_NAME --cache-from=baby-botto-cache
          fi

      - name: Save cache of Docker image
        run: >
          docker tag baby-botto baby-botto-cache &&
          mkdir -p /tmp/docker-save &&
          docker save baby-botto-cache -o /tmp/docker-save/snapshot.tar &&
          ls -lh /tmp/docker-save || true
        if: always() && steps.cache-docker.outputs.cache-hit != 'true'

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    environment: Baby

    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_run'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Load docker image from cache
        id: cache-docker
        uses: actions/cache@v1
        with:
          path: /tmp/docker-save
          key: docker-save-motto-${{ hashFiles('Dockerfile') }}

      - name: Load cached image into Docker
        run: docker load -i /tmp/docker-save/snapshot.tar || true
        if: steps.cache-docker.outputs.cache-hit == 'true'

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME --cache-from=baby-botto-cache

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/Lovely-Development-Team/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "develop" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  deploy:
    # Ensure test job passes before pushing image.
    needs: push

    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_run'

    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set env
        run: echo "RELEASE_VERSION=`git describe --tags`" >> $GITHUB_ENV
        continue-on-error: true

      - name: Start MottoBotto
        uses: appleboy/ssh-action@v0.1.4
        env:
          HOST: ${{ secrets.DEPLOY_HOST }}
          USERNAME: ${{ secrets.DEPLOY_USERNAME }}
          PASSPHRASE: ${{ secrets.DEPLOY_SSHKEY_PASSPHRASE }}
          KEY: ${{ secrets.DEPLOY_SSHKEY }}
          SCRIPT: >
            docker pull ghcr.io/lovely-development-team/${{ env.IMAGE_NAME }}:latest &&
            docker stop baby_botto || true &&
            docker rm baby_botto || true &&
            docker run -d -t --restart unless-stopped
            -e MOTTOBOTTO_DISCORD_TOKEN='${{ secrets.DISCORD_TOKEN }}'
            -e MOTTOBOTTO_AIRTABLE_BASE='${{ secrets.AIRTABLE_BASE }}'
            -e MOTTOBOTTO_AIRTABLE_KEY='${{ secrets.AIRTABLE_KEY }}'
            -e MOTTOBOTTO_CHANNELS='${{ secrets.CHANNELS }}'
            -e MOTTOBOTTO_TRIGGERS='${{ secrets.TRIGGERS }}'
            -e MOTTOBOTTO_ID='Capys-hosted BabyBotto'
            -e MOTTOBOTTO_SHOULD_REPLY='${{ secrets.SHOULD_REPLY }}'
            -e MOTTOBOTTO_ALLOW_RANDOM_IN_SERVER='${{ secrets.ALLOW_RANDOM_IN_SERVER }}'
            -e MOTTOBOTTO_MINIMUM_RANDOM_INTERVAL_MINUTES='${{ secrets.MINIMUM_RANDOM_INTERVAL_MINUTES }}'
            -e MOTTOBOTTO_MINIMUM_RANDOM_INTERVAL_MINUTES_PER_USER='${{ secrets.MINIMUM_RANDOM_INTERVAL_MINUTES_PER_USER }}'
            -e MOTTOBOTTO_WAVE_ON_TAG='${{ secrets.WAVE_ON_TAG }}'
            -e MOTTOBOTTO_RANDOM_MOTTO_SOURCE_VIEW='${{ secrets.RANDOM_MOTTO_SOURCE_VIEW }}'
            -e MOTTOBOTTO_MAINTAINER_IDS='${{ secrets.MAINTAINER_IDS }}'
            -e MOTTOBOTTO_VERSION='${{ env.RELEASE_VERSION }}'
            --name baby_botto ghcr.io/lovely-development-team/${{ env.IMAGE_NAME }}:latest